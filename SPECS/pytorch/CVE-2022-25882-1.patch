From 2b8103c33eba6140b8da80abed1bf2f0f2900371 Mon Sep 17 00:00:00 2001
From: jnovikov <johnnovikov0@gmail.com>
Date: Mon, 1 Aug 2022 22:44:16 +0100
Subject: [PATCH 01/10] Not allow to read tensor external_data outside the
 model directory

Signed-off-by: jnovikov <johnnovikov0@gmail.com>
---
 onnx/checker.cc                   | 24 ++++++++-
 onnx/common/path.cc               | 88 +++++++++++++++++++++++++++++++
 onnx/common/path.h                |  2 +
 onnx/test/cpp/common_path_test.cc | 80 ++++++++++++++++++++++++++++
 onnx/test/test_external_data.py   | 42 +++++++++++----
 5 files changed, 226 insertions(+), 10 deletions(-)
 create mode 100644 onnx/test/cpp/common_path_test.cc

diff --git a/onnx/checker.cc b/onnx/checker.cc
index 0796391a43..9ab1f5a39f 100644
--- a/onnx/checker.cc
+++ b/onnx/checker.cc
@@ -126,7 +126,20 @@ void check_tensor(const TensorProto& tensor, const CheckerContext& ctx) {
     for (const StringStringEntryProto& entry : tensor.external_data()) {
       if (entry.has_key() && entry.has_value() && entry.key() == "location") {
         has_location = true;
-        std::string data_path = path_join(ctx.get_model_dir(), entry.value());
+        std::string relative_path  = clean_relative_path(entry.value());
+        // Check that normalized relative path starts with "../" or "..\" on windows.
+        if (relative_path.rfind(".." + k_preferred_path_separator, 0) == 0) {
+          fail_check(
+              "Data of TensorProto ( tensor name: ",
+              tensor.name(),
+              ") should be file inside the ",
+              ctx.get_model_dir(),
+              ", but the '",
+              entry.value(),
+              "' points outside the directory");
+        }
+
+        std::string data_path = path_join(ctx.get_model_dir(), relative_path);
         // use stat to check whether the file exists
         struct stat buffer;
         if (stat((data_path).c_str(), &buffer) != 0) {
@@ -137,6 +150,15 @@ void check_tensor(const TensorProto& tensor, const CheckerContext& ctx) {
               data_path,
               ", but it doesn't exist or is not accessible.");
         }
+        // Do not allow symlinks or directories.
+        if (!S_ISREG(buffer.st_mode)) {
+          fail_check(
+              "Data of TensorProto ( tensor name: ",
+              tensor.name(),
+              ") should be stored in ",
+              data_path,
+              ", but it is not regular file.");
+        }
       }
     }
     if (!has_location) {
diff --git a/onnx/common/path.cc b/onnx/common/path.cc
index 7c0b33aea7..c2758d48dc 100644
--- a/onnx/common/path.cc
+++ b/onnx/common/path.cc
@@ -9,6 +9,29 @@
 
 namespace ONNX_NAMESPACE {
 
+bool is_path_separator(char c) {
+  // Windows accept / as path separator.
+  if (k_preferred_path_separator == "\\") {
+    return c == '\\' || c == '/';
+  }
+
+  return c == k_preferred_path_separator[0];
+}
+
+void normalize_separator(std::string &path) {
+  char preferred_sep = k_preferred_path_separator[0];
+  if (preferred_sep == '/') {
+    // Do nothing on linux.
+    return;
+  }
+
+  for (size_t i = 0; i < path.size(); i++) {
+    if (is_path_separator(path[i]) && path[i] != preferred_sep) {
+      path[i] = preferred_sep;
+    }
+  }
+}
+
 std::string path_join(const std::string& origin, const std::string& append) {
   if (origin.find_last_of(k_preferred_path_separator) != origin.length() - k_preferred_path_separator.length()) {
     return origin + k_preferred_path_separator + append;
@@ -16,4 +39,69 @@ std::string path_join(const std::string& origin, const std::string& append) {
   return origin + append;
 }
 
+std::string clean_relative_path(const std::string& path) {
+  if (path.empty()) {
+    return ".";
+  }
+
+  std::string out;
+
+  char sep = k_preferred_path_separator[0];
+  size_t n = path.size();
+
+  size_t r = 0;
+  size_t dotdot = 0;
+
+
+  while (r < n) {
+    if (is_path_separator(path[r])) {
+      r++;
+      continue;
+    }
+
+    if (path[r] == '.' && (r + 1 == n || is_path_separator(path[r+1]))) {
+      r++;
+      continue;
+    }
+
+    if (path[r] == '.' && path[r+1] == '.' && (r + 2 == n || is_path_separator(path[r+2]))) {
+      r += 2;
+
+      if (out.size() > dotdot) {
+        while (out.size() > dotdot && !is_path_separator(out.back())) {
+          out.pop_back();
+        }
+        out.pop_back();
+      } else {
+        if (!out.empty()) {
+          out.push_back(sep);
+        }
+
+        out.push_back('.');
+        out.push_back('.');
+        dotdot = out.size();
+      }
+
+      continue;
+    }
+
+    if (!out.empty() && out.back() != sep) {
+      out.push_back(sep);
+    }
+
+    for (; r < n && !is_path_separator(path[r]); r++) {
+      out.push_back(path[r]);
+    }
+  }
+
+  if (out.empty()) {
+    out.push_back('.');
+  }
+
+  // Use 1 separator in path.
+  normalize_separator(out);
+
+  return out;
+}
+
 } // namespace ONNX_NAMESPACE
diff --git a/onnx/common/path.h b/onnx/common/path.h
index 62025cb444..b23217e820 100644
--- a/onnx/common/path.h
+++ b/onnx/common/path.h
@@ -18,5 +18,7 @@ const std::string k_preferred_path_separator = "/";
 #endif
 
 std::string path_join(const std::string& origin, const std::string& append);
+void normalize_separator(std::string& path);
+std::string clean_relative_path(const std::string& path);
 
 } // namespace ONNX_NAMESPACE
diff --git a/onnx/test/cpp/common_path_test.cc b/onnx/test/cpp/common_path_test.cc
new file mode 100644
index 0000000000..d8dcd7f1b9
--- /dev/null
+++ b/onnx/test/cpp/common_path_test.cc
@@ -0,0 +1,80 @@
+/*
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+#include <list>
+#include <utility>
+#include "gtest/gtest.h"
+
+#include "onnx/common/path.h"
+
+using namespace ONNX_NAMESPACE;
+
+namespace ONNX_NAMESPACE {
+namespace Test {
+
+TEST(PathTest, CleanRelativePathTest) {
+  std::list<std::pair<std::string, std::string>> test_cases = {
+    // Already normal.
+    {"abc", "abc"},
+    {"abc/def", "abc/def"},
+    {"a/b/c", "a/b/c"},
+    {".", "."},
+    {"..", ".."},
+    {"../..", "../.."},
+    {"../../abc", "../../abc"},
+
+    // Remove leading slash
+    {"/abc", "abc"},
+    {"/", "."},
+
+    // Remove trailing slash
+	{"abc/", "abc"},
+	{"abc/def/", "abc/def"},
+	{"a/b/c/", "a/b/c"},
+	{"./", "."},
+	{"../", ".."},
+	{"../../", "../.."},
+	{"/abc/", "abc"},
+
+    // Remove doubled slash
+	{"abc//def//ghi", "abc/def/ghi"},
+	{"//abc", "abc"},
+	{"///abc", "abc"},
+	{"//abc//", "abc"},
+	{"abc//", "abc"},
+
+    // Remove . elements
+    {"abc/./def", "abc/def"},
+	{"/./abc/def", "abc/def"},
+	{"abc/.", "abc"},
+
+    // Remove .. elements
+	{"abc/def/ghi/../jkl", "abc/def/jkl"},
+	{"abc/def/../ghi/../jkl", "abc/jkl"},
+	{"abc/def/..", "abc"},
+	{"abc/def/../..", "."},
+	{"/abc/def/../..", "."},
+	{"abc/def/../../..", ".."},
+	{"/abc/def/../../..", ".."},
+	{"abc/def/../../../ghi/jkl/../../../mno", "../../mno"},
+	{"/../abc", "../abc"},
+
+    // Combinations
+	{"abc/./../def", "def"},
+	{"abc//./../def", "def"},
+	{"abc/../../././../def", "../../def"},
+  };
+
+  for (std::pair<std::string, std::string>& test_case: test_cases) {
+    std::string path = test_case.first;
+    std::string expected = test_case.second;
+    // Normalize separator in case of windows tests.
+    normalize_separator(expected);
+
+    EXPECT_EQ(clean_relative_path(path), expected) << "Invalid relative path returned for " << path;
+  }
+}
+
+} // namespace Test
+} // namespace ONNX_NAMESPACE
diff --git a/onnx/test/test_external_data.py b/onnx/test/test_external_data.py
index 1170c2a1e5..ae93c84b8c 100644
--- a/onnx/test/test_external_data.py
+++ b/onnx/test/test_external_data.py
@@ -1,5 +1,6 @@
 # SPDX-License-Identifier: Apache-2.0
 import tempfile
+import pathlib
 import unittest
 import uuid
 
@@ -49,7 +50,6 @@ def create_external_data_tensor(self, value: List[Any], tensor_name: str) -> Ten
         return tensor
 
     def create_test_model(self) -> str:
-
         constant_node = onnx.helper.make_node(
             'Constant',
             inputs=[],
@@ -226,7 +226,8 @@ def test_convert_model_to_external_data_from_one_file_with_location(self) -> Non
         model_file_path = self.get_temp_model_filename()
         external_data_file = str(uuid.uuid4())
 
-        convert_model_to_external_data(self.model, size_threshold=0, all_tensors_to_one_file=True, location=external_data_file)
+        convert_model_to_external_data(self.model, size_threshold=0, all_tensors_to_one_file=True,
+                                       location=external_data_file)
         onnx.save_model(self.model, model_file_path)
 
         self.assertTrue(Path.isfile(os.path.join(self.temp_dir, external_data_file)))
@@ -260,7 +261,8 @@ def test_convert_model_to_external_data_from_one_file_without_location_uses_mode
     def test_convert_model_to_external_data_one_file_per_tensor_without_attribute(self) -> None:
         model_file_path = self.get_temp_model_filename()
 
-        convert_model_to_external_data(self.model, size_threshold=0, all_tensors_to_one_file=False, convert_attribute=False)
+        convert_model_to_external_data(self.model, size_threshold=0, all_tensors_to_one_file=False,
+                                       convert_attribute=False)
         onnx.save_model(self.model, model_file_path)
 
         self.assertTrue(Path.isfile(model_file_path))
@@ -270,7 +272,8 @@ def test_convert_model_to_external_data_one_file_per_tensor_without_attribute(se
     def test_convert_model_to_external_data_one_file_per_tensor_with_attribute(self) -> None:
         model_file_path = self.get_temp_model_filename()
 
-        convert_model_to_external_data(self.model, size_threshold=0, all_tensors_to_one_file=False, convert_attribute=True)
+        convert_model_to_external_data(self.model, size_threshold=0, all_tensors_to_one_file=False,
+                                       convert_attribute=True)
         onnx.save_model(self.model, model_file_path)
 
         self.assertTrue(Path.isfile(model_file_path))
@@ -280,7 +283,8 @@ def test_convert_model_to_external_data_one_file_per_tensor_with_attribute(self)
     def test_convert_model_to_external_data_does_not_convert_attribute_values(self) -> None:
         model_file_path = self.get_temp_model_filename()
 
-        convert_model_to_external_data(self.model, size_threshold=0, convert_attribute=False, all_tensors_to_one_file=False)
+        convert_model_to_external_data(self.model, size_threshold=0, convert_attribute=False,
+                                       all_tensors_to_one_file=False)
         onnx.save_model(self.model, model_file_path)
 
         self.assertTrue(Path.isfile(os.path.join(self.temp_dir, "input_value")))
@@ -399,11 +403,11 @@ def get_temp_model_filename(self) -> str:
     def create_test_model(self) -> ModelProto:
         X = helper.make_tensor_value_info('X', TensorProto.FLOAT, self.large_data.shape)
         input_init = helper.make_tensor(name='X', data_type=TensorProto.FLOAT,
-            dims=self.large_data.shape, vals=self.large_data.tobytes(), raw=True)
+                                        dims=self.large_data.shape, vals=self.large_data.tobytes(), raw=True)
 
         shape_data = np.array(self.small_data, np.int64)
         shape_init = helper.make_tensor(name='Shape', data_type=TensorProto.INT64,
-            dims=shape_data.shape, vals=shape_data.tobytes(), raw=True)
+                                        dims=shape_data.shape, vals=shape_data.tobytes(), raw=True)
         C = helper.make_tensor_value_info('C', TensorProto.INT64, self.small_data)
 
         reshape = onnx.helper.make_node(
@@ -432,13 +436,14 @@ def test_check_model(self) -> None:
         checker.check_model(self.model)
 
     def test_reshape_inference_with_external_data_fail(self) -> None:
-        onnx.save_model(self.model, self.model_file_path, save_as_external_data=True, all_tensors_to_one_file=False, size_threshold=0)
+        onnx.save_model(self.model, self.model_file_path, save_as_external_data=True, all_tensors_to_one_file=False,
+                        size_threshold=0)
         model_without_external_data = onnx.load(self.model_file_path, load_external_data=False)
         # Shape inference of Reshape uses ParseData
         # ParseData cannot handle external data and should throw the error as follows:
         # Cannot parse data from external tensors. Please load external data into raw data for tensor: Shape
         self.assertRaises(shape_inference.InferenceError, shape_inference.infer_shapes,
-            model_without_external_data, strict_mode=True)
+                          model_without_external_data, strict_mode=True)
 
     def test_to_array_with_external_data(self) -> None:
         onnx.save_model(self.model,
@@ -492,5 +497,24 @@ def test_save_model_with_external_data_multiple_times(self) -> None:
         self.assertTrue(np.allclose(to_array(small_shape_tensor, self.temp_dir), self.small_data))
 
 
+class TestNotAllowToLoadExternalDataOutsideModelDirectory(TestLoadExternalDataBase):
+    """Essential test to check that onnx (validate) C++ code will not allow to load external_data outside the model
+    directory. """
+    def create_external_data_tensor(self, value: List[Any], tensor_name: str) -> TensorProto:
+        tensor = from_array(np.array(value))
+        tensor.name = tensor_name
+
+        set_external_data(tensor, location="../../file.bin")
+
+        tensor.ClearField('raw_data')
+        tensor.data_location = onnx.TensorProto.EXTERNAL
+        return tensor
+
+    def test_check_model(self) -> None:
+        """We only test the model validation as onnxruntime uses this to load the model. """
+        with self.assertRaises(onnx.checker.ValidationError):
+            checker.check_model(self.model_filename)
+
+
 if __name__ == '__main__':
     unittest.main()

From 759b41a45ee42feeb1680a01769e969baf85202e Mon Sep 17 00:00:00 2001
From: jnovikov <johnnovikov0@gmail.com>
Date: Mon, 1 Aug 2022 22:59:15 +0100
Subject: [PATCH 02/10] Fix formatting errors

Signed-off-by: jnovikov <johnnovikov0@gmail.com>
---
 onnx/checker.cc                   |  2 +-
 onnx/common/path.cc               |  7 ++-
 onnx/test/cpp/common_path_test.cc | 88 +++++++++++++++----------------
 3 files changed, 48 insertions(+), 49 deletions(-)

diff --git a/onnx/checker.cc b/onnx/checker.cc
index 9ab1f5a39f..9711d28fa5 100644
--- a/onnx/checker.cc
+++ b/onnx/checker.cc
@@ -126,7 +126,7 @@ void check_tensor(const TensorProto& tensor, const CheckerContext& ctx) {
     for (const StringStringEntryProto& entry : tensor.external_data()) {
       if (entry.has_key() && entry.has_value() && entry.key() == "location") {
         has_location = true;
-        std::string relative_path  = clean_relative_path(entry.value());
+        std::string relative_path = clean_relative_path(entry.value());
         // Check that normalized relative path starts with "../" or "..\" on windows.
         if (relative_path.rfind(".." + k_preferred_path_separator, 0) == 0) {
           fail_check(
diff --git a/onnx/common/path.cc b/onnx/common/path.cc
index c2758d48dc..99b422e646 100644
--- a/onnx/common/path.cc
+++ b/onnx/common/path.cc
@@ -18,7 +18,7 @@ bool is_path_separator(char c) {
   return c == k_preferred_path_separator[0];
 }
 
-void normalize_separator(std::string &path) {
+void normalize_separator(std::string& path) {
   char preferred_sep = k_preferred_path_separator[0];
   if (preferred_sep == '/') {
     // Do nothing on linux.
@@ -52,19 +52,18 @@ std::string clean_relative_path(const std::string& path) {
   size_t r = 0;
   size_t dotdot = 0;
 
-
   while (r < n) {
     if (is_path_separator(path[r])) {
       r++;
       continue;
     }
 
-    if (path[r] == '.' && (r + 1 == n || is_path_separator(path[r+1]))) {
+    if (path[r] == '.' && (r + 1 == n || is_path_separator(path[r + 1]))) {
       r++;
       continue;
     }
 
-    if (path[r] == '.' && path[r+1] == '.' && (r + 2 == n || is_path_separator(path[r+2]))) {
+    if (path[r] == '.' && path[r + 1] == '.' && (r + 2 == n || is_path_separator(path[r + 2]))) {
       r += 2;
 
       if (out.size() > dotdot) {
diff --git a/onnx/test/cpp/common_path_test.cc b/onnx/test/cpp/common_path_test.cc
index d8dcd7f1b9..2bf61f5834 100644
--- a/onnx/test/cpp/common_path_test.cc
+++ b/onnx/test/cpp/common_path_test.cc
@@ -15,58 +15,58 @@ namespace Test {
 
 TEST(PathTest, CleanRelativePathTest) {
   std::list<std::pair<std::string, std::string>> test_cases = {
-    // Already normal.
-    {"abc", "abc"},
-    {"abc/def", "abc/def"},
-    {"a/b/c", "a/b/c"},
-    {".", "."},
-    {"..", ".."},
-    {"../..", "../.."},
-    {"../../abc", "../../abc"},
+      // Already normal.
+      {"abc", "abc"},
+      {"abc/def", "abc/def"},
+      {"a/b/c", "a/b/c"},
+      {".", "."},
+      {"..", ".."},
+      {"../..", "../.."},
+      {"../../abc", "../../abc"},
 
-    // Remove leading slash
-    {"/abc", "abc"},
-    {"/", "."},
+      // Remove leading slash
+      {"/abc", "abc"},
+      {"/", "."},
 
-    // Remove trailing slash
-	{"abc/", "abc"},
-	{"abc/def/", "abc/def"},
-	{"a/b/c/", "a/b/c"},
-	{"./", "."},
-	{"../", ".."},
-	{"../../", "../.."},
-	{"/abc/", "abc"},
+      // Remove trailing slash
+      {"abc/", "abc"},
+      {"abc/def/", "abc/def"},
+      {"a/b/c/", "a/b/c"},
+      {"./", "."},
+      {"../", ".."},
+      {"../../", "../.."},
+      {"/abc/", "abc"},
 
-    // Remove doubled slash
-	{"abc//def//ghi", "abc/def/ghi"},
-	{"//abc", "abc"},
-	{"///abc", "abc"},
-	{"//abc//", "abc"},
-	{"abc//", "abc"},
+      // Remove doubled slash
+      {"abc//def//ghi", "abc/def/ghi"},
+      {"//abc", "abc"},
+      {"///abc", "abc"},
+      {"//abc//", "abc"},
+      {"abc//", "abc"},
 
-    // Remove . elements
-    {"abc/./def", "abc/def"},
-	{"/./abc/def", "abc/def"},
-	{"abc/.", "abc"},
+      // Remove . elements
+      {"abc/./def", "abc/def"},
+      {"/./abc/def", "abc/def"},
+      {"abc/.", "abc"},
 
-    // Remove .. elements
-	{"abc/def/ghi/../jkl", "abc/def/jkl"},
-	{"abc/def/../ghi/../jkl", "abc/jkl"},
-	{"abc/def/..", "abc"},
-	{"abc/def/../..", "."},
-	{"/abc/def/../..", "."},
-	{"abc/def/../../..", ".."},
-	{"/abc/def/../../..", ".."},
-	{"abc/def/../../../ghi/jkl/../../../mno", "../../mno"},
-	{"/../abc", "../abc"},
+      // Remove .. elements
+      {"abc/def/ghi/../jkl", "abc/def/jkl"},
+      {"abc/def/../ghi/../jkl", "abc/jkl"},
+      {"abc/def/..", "abc"},
+      {"abc/def/../..", "."},
+      {"/abc/def/../..", "."},
+      {"abc/def/../../..", ".."},
+      {"/abc/def/../../..", ".."},
+      {"abc/def/../../../ghi/jkl/../../../mno", "../../mno"},
+      {"/../abc", "../abc"},
 
-    // Combinations
-	{"abc/./../def", "def"},
-	{"abc//./../def", "def"},
-	{"abc/../../././../def", "../../def"},
+      // Combinations
+      {"abc/./../def", "def"},
+      {"abc//./../def", "def"},
+      {"abc/../../././../def", "../../def"},
   };
 
-  for (std::pair<std::string, std::string>& test_case: test_cases) {
+  for (std::pair<std::string, std::string>& test_case : test_cases) {
     std::string path = test_case.first;
     std::string expected = test_case.second;
     // Normalize separator in case of windows tests.

From 1eb98908fd1d12b0ba5af94a32ec80f01421f498 Mon Sep 17 00:00:00 2001
From: jnovikov <johnnovikov0@gmail.com>
Date: Mon, 1 Aug 2022 23:30:30 +0100
Subject: [PATCH 03/10] Disable segfaulty test

Signed-off-by: jnovikov <johnnovikov0@gmail.com>
---
 onnx/test/cpp/onnxifi_backend_test.cc | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/onnx/test/cpp/onnxifi_backend_test.cc b/onnx/test/cpp/onnxifi_backend_test.cc
index ea8a093604..018575cb9e 100644
--- a/onnx/test/cpp/onnxifi_backend_test.cc
+++ b/onnx/test/cpp/onnxifi_backend_test.cc
@@ -18,7 +18,7 @@
 
 namespace ONNX_NAMESPACE {
 namespace Test {
-TEST(OnnxifiLoadTest, OnnxifiDummyBackend) {
+TEST(DISABLED_OnnxifiLoadTest, OnnxifiDummyBackend) {
 #define EXPECT_EQ_OSS(X) EXPECT_EQ(X, ONNXIFI_STATUS_SUCCESS)
   onnxifi_library dummy_backend;
   EXPECT_TRUE(onnxifi_load(1, ONNXIFI_DUMMY_LIBRARY, &dummy_backend));

From de436435f1e6f388358005b97aee939dd8d7af50 Mon Sep 17 00:00:00 2001
From: jnovikov <johnnovikov0@gmail.com>
Date: Tue, 2 Aug 2022 00:57:46 +0100
Subject: [PATCH 04/10] Fix cpp tests

Signed-off-by: jnovikov <johnnovikov0@gmail.com>
---
 onnx/test/cpp/common_path_test.cc     | 110 ++++++++++++--------------
 onnx/test/cpp/onnxifi_backend_test.cc |   2 +-
 2 files changed, 51 insertions(+), 61 deletions(-)

diff --git a/onnx/test/cpp/common_path_test.cc b/onnx/test/cpp/common_path_test.cc
index 2bf61f5834..94383add5d 100644
--- a/onnx/test/cpp/common_path_test.cc
+++ b/onnx/test/cpp/common_path_test.cc
@@ -12,68 +12,58 @@ using namespace ONNX_NAMESPACE;
 
 namespace ONNX_NAMESPACE {
 namespace Test {
+namespace {
+std::string fix_sep(std::string path) {
+  std::string out = path;
+  normalize_separator(out);
+  return out;
+}
+} // namespace
 
 TEST(PathTest, CleanRelativePathTest) {
-  std::list<std::pair<std::string, std::string>> test_cases = {
-      // Already normal.
-      {"abc", "abc"},
-      {"abc/def", "abc/def"},
-      {"a/b/c", "a/b/c"},
-      {".", "."},
-      {"..", ".."},
-      {"../..", "../.."},
-      {"../../abc", "../../abc"},
-
-      // Remove leading slash
-      {"/abc", "abc"},
-      {"/", "."},
-
-      // Remove trailing slash
-      {"abc/", "abc"},
-      {"abc/def/", "abc/def"},
-      {"a/b/c/", "a/b/c"},
-      {"./", "."},
-      {"../", ".."},
-      {"../../", "../.."},
-      {"/abc/", "abc"},
-
-      // Remove doubled slash
-      {"abc//def//ghi", "abc/def/ghi"},
-      {"//abc", "abc"},
-      {"///abc", "abc"},
-      {"//abc//", "abc"},
-      {"abc//", "abc"},
-
-      // Remove . elements
-      {"abc/./def", "abc/def"},
-      {"/./abc/def", "abc/def"},
-      {"abc/.", "abc"},
-
-      // Remove .. elements
-      {"abc/def/ghi/../jkl", "abc/def/jkl"},
-      {"abc/def/../ghi/../jkl", "abc/jkl"},
-      {"abc/def/..", "abc"},
-      {"abc/def/../..", "."},
-      {"/abc/def/../..", "."},
-      {"abc/def/../../..", ".."},
-      {"/abc/def/../../..", ".."},
-      {"abc/def/../../../ghi/jkl/../../../mno", "../../mno"},
-      {"/../abc", "../abc"},
-
-      // Combinations
-      {"abc/./../def", "def"},
-      {"abc//./../def", "def"},
-      {"abc/../../././../def", "../../def"},
-  };
-
-  for (std::pair<std::string, std::string>& test_case : test_cases) {
-    std::string path = test_case.first;
-    std::string expected = test_case.second;
-    // Normalize separator in case of windows tests.
-    normalize_separator(expected);
-
-    EXPECT_EQ(clean_relative_path(path), expected) << "Invalid relative path returned for " << path;
-  }
+  // Already normal.
+  EXPECT_EQ(clean_relative_path("abc"), fix_sep("abc"));
+  EXPECT_EQ(clean_relative_path("abc/def"), fix_sep("abc/def"));
+  EXPECT_EQ(clean_relative_path("a/b/c"), fix_sep("a/b/c"));
+  EXPECT_EQ(clean_relative_path("."), fix_sep("."));
+  EXPECT_EQ(clean_relative_path(".."), fix_sep(".."));
+  EXPECT_EQ(clean_relative_path("../.."), fix_sep("../.."));
+  EXPECT_EQ(clean_relative_path("../../abc"), fix_sep("../../abc"));
+  // Remove leading slash
+  EXPECT_EQ(clean_relative_path("/abc"), fix_sep("abc"));
+  EXPECT_EQ(clean_relative_path("/"), fix_sep("."));
+  // Remove trailing slash
+  EXPECT_EQ(clean_relative_path("abc/"), fix_sep("abc"));
+  EXPECT_EQ(clean_relative_path("abc/def/"), fix_sep("abc/def"));
+  EXPECT_EQ(clean_relative_path("a/b/c/"), fix_sep("a/b/c"));
+  EXPECT_EQ(clean_relative_path("./"), fix_sep("."));
+  EXPECT_EQ(clean_relative_path("../"), fix_sep(".."));
+  EXPECT_EQ(clean_relative_path("../../"), fix_sep("../.."));
+  EXPECT_EQ(clean_relative_path("/abc/"), fix_sep("abc"));
+  // Remove doubled slash
+  EXPECT_EQ(clean_relative_path("abc//def//ghi"), fix_sep("abc/def/ghi"));
+  EXPECT_EQ(clean_relative_path("//abc"), fix_sep("abc"));
+  EXPECT_EQ(clean_relative_path("///abc"), fix_sep("abc"));
+  EXPECT_EQ(clean_relative_path("//abc//"), fix_sep("abc"));
+  EXPECT_EQ(clean_relative_path("abc//"), fix_sep("abc"));
+  // Remove . elements
+  EXPECT_EQ(clean_relative_path("abc/./def"), fix_sep("abc/def"));
+  EXPECT_EQ(clean_relative_path("/./abc/def"), fix_sep("abc/def"));
+  EXPECT_EQ(clean_relative_path("abc/."), fix_sep("abc"));
+  // Remove .. elements
+  EXPECT_EQ(clean_relative_path("abc/def/ghi/../jkl"), fix_sep("abc/def/jkl"));
+  EXPECT_EQ(clean_relative_path("abc/def/../ghi/../jkl"), fix_sep("abc/jkl"));
+  EXPECT_EQ(clean_relative_path("abc/def/.."), fix_sep("abc"));
+  EXPECT_EQ(clean_relative_path("abc/def/../.."), fix_sep("."));
+  EXPECT_EQ(clean_relative_path("/abc/def/../.."), fix_sep("."));
+  EXPECT_EQ(clean_relative_path("abc/def/../../.."), fix_sep(".."));
+  EXPECT_EQ(clean_relative_path("/abc/def/../../.."), fix_sep(".."));
+  EXPECT_EQ(clean_relative_path("abc/def/../../../ghi/jkl/../../../mno"), fix_sep("../../mno"));
+  EXPECT_EQ(clean_relative_path("/../abc"), fix_sep("../abc"));
+  // Combinations
+  EXPECT_EQ(clean_relative_path("abc/./../def"), fix_sep("def"));
+  EXPECT_EQ(clean_relative_path("abc//./../def"), fix_sep("def"));
+  EXPECT_EQ(clean_relative_path("abc/../../././../def"), fix_sep("../../def"));
 }
 
 } // namespace Test
diff --git a/onnx/test/cpp/onnxifi_backend_test.cc b/onnx/test/cpp/onnxifi_backend_test.cc
index 018575cb9e..ea8a093604 100644
--- a/onnx/test/cpp/onnxifi_backend_test.cc
+++ b/onnx/test/cpp/onnxifi_backend_test.cc
@@ -18,7 +18,7 @@
 
 namespace ONNX_NAMESPACE {
 namespace Test {
-TEST(DISABLED_OnnxifiLoadTest, OnnxifiDummyBackend) {
+TEST(OnnxifiLoadTest, OnnxifiDummyBackend) {
 #define EXPECT_EQ_OSS(X) EXPECT_EQ(X, ONNXIFI_STATUS_SUCCESS)
   onnxifi_library dummy_backend;
   EXPECT_TRUE(onnxifi_load(1, ONNXIFI_DUMMY_LIBRARY, &dummy_backend));

From 9fe9660c2051a8e0ae6d8e28f22befafe634f9b3 Mon Sep 17 00:00:00 2001
From: jnovikov <johnnovikov0@gmail.com>
Date: Tue, 2 Aug 2022 01:20:51 +0100
Subject: [PATCH 05/10] Fix UB while removing ../

Signed-off-by: jnovikov <johnnovikov0@gmail.com>
---
 onnx/common/path.cc | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/onnx/common/path.cc b/onnx/common/path.cc
index 99b422e646..d1fc892054 100644
--- a/onnx/common/path.cc
+++ b/onnx/common/path.cc
@@ -70,7 +70,7 @@ std::string clean_relative_path(const std::string& path) {
         while (out.size() > dotdot && !is_path_separator(out.back())) {
           out.pop_back();
         }
-        out.pop_back();
+        if (!out.empty()) out.pop_back();
       } else {
         if (!out.empty()) {
           out.push_back(sep);

From ea4f4192c6b01d69c9faee28b1507f13190b20b5 Mon Sep 17 00:00:00 2001
From: jnovikov <johnnovikov0@gmail.com>
Date: Tue, 2 Aug 2022 01:31:59 +0100
Subject: [PATCH 06/10] Fix clang-format

Signed-off-by: jnovikov <johnnovikov0@gmail.com>
---
 onnx/common/path.cc | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/onnx/common/path.cc b/onnx/common/path.cc
index d1fc892054..d42a108428 100644
--- a/onnx/common/path.cc
+++ b/onnx/common/path.cc
@@ -70,7 +70,8 @@ std::string clean_relative_path(const std::string& path) {
         while (out.size() > dotdot && !is_path_separator(out.back())) {
           out.pop_back();
         }
-        if (!out.empty()) out.pop_back();
+        if (!out.empty())
+          out.pop_back();
       } else {
         if (!out.empty()) {
           out.push_back(sep);

From 7ee52788c353a180cffd73eccbfcf0c5179ec74c Mon Sep 17 00:00:00 2001
From: jnovikov <johnnovikov0@gmail.com>
Date: Tue, 2 Aug 2022 01:57:31 +0100
Subject: [PATCH 07/10] Check for symlinks only on POSIX systems

Signed-off-by: jnovikov <johnnovikov0@gmail.com>
---
 onnx/checker.cc | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/onnx/checker.cc b/onnx/checker.cc
index 9711d28fa5..4024797f6b 100644
--- a/onnx/checker.cc
+++ b/onnx/checker.cc
@@ -150,7 +150,9 @@ void check_tensor(const TensorProto& tensor, const CheckerContext& ctx) {
               data_path,
               ", but it doesn't exist or is not accessible.");
         }
-        // Do not allow symlinks or directories.
+#ifdef _WIN32
+#else // POSIX
+      //  Do not allow symlinks or directories.
         if (!S_ISREG(buffer.st_mode)) {
           fail_check(
               "Data of TensorProto ( tensor name: ",
@@ -159,6 +161,7 @@ void check_tensor(const TensorProto& tensor, const CheckerContext& ctx) {
               data_path,
               ", but it is not regular file.");
         }
+#endif
       }
     }
     if (!has_location) {

From 47551b1eb0bd22fad6a174ee70a630eb6cc65607 Mon Sep 17 00:00:00 2001
From: jnovikov <johnnovikov0@gmail.com>
Date: Thu, 4 Aug 2022 22:50:24 +0100
Subject: [PATCH 08/10] Add specific to Windows external_data test

Signed-off-by: jnovikov <johnnovikov0@gmail.com>
---
 onnx/test/test_external_data.py | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)

diff --git a/onnx/test/test_external_data.py b/onnx/test/test_external_data.py
index ae93c84b8c..2feeed2ff5 100644
--- a/onnx/test/test_external_data.py
+++ b/onnx/test/test_external_data.py
@@ -500,6 +500,7 @@ def test_save_model_with_external_data_multiple_times(self) -> None:
 class TestNotAllowToLoadExternalDataOutsideModelDirectory(TestLoadExternalDataBase):
     """Essential test to check that onnx (validate) C++ code will not allow to load external_data outside the model
     directory. """
+
     def create_external_data_tensor(self, value: List[Any], tensor_name: str) -> TensorProto:
         tensor = from_array(np.array(value))
         tensor.name = tensor_name
@@ -516,5 +517,26 @@ def test_check_model(self) -> None:
             checker.check_model(self.model_filename)
 
 
+class TestNotAllowToLoadExternalDataOutsideModelDirectoryOnWindows(TestLoadExternalDataBase):
+    """Essential test to check that onnx (validate) C++ code will not allow to load external_data outside the model
+    directory. """
+
+    def create_external_data_tensor(self, value: List[Any], tensor_name: str) -> TensorProto:
+        tensor = from_array(np.array(value))
+        tensor.name = tensor_name
+
+        set_external_data(tensor, location="..\\..\\file.bin")
+
+        tensor.ClearField('raw_data')
+        tensor.data_location = onnx.TensorProto.EXTERNAL
+        return tensor
+
+    @pytest.mark.skipif(os.name != 'nt', reason='Skip Windows test')
+    def test_check_model(self) -> None:
+        """We only test the model validation as onnxruntime uses this to load the model. """
+        with self.assertRaises(onnx.checker.ValidationError):
+            checker.check_model(self.model_filename)
+
+
 if __name__ == '__main__':
     unittest.main()

From f179deb46b1300f11867bfe87d9067dfc108802b Mon Sep 17 00:00:00 2001
From: jnovikov <johnnovikov0@gmail.com>
Date: Thu, 4 Aug 2022 23:01:28 +0100
Subject: [PATCH 09/10] Change specific Windows external_data test decorator
 tofix mypy

Signed-off-by: jnovikov <johnnovikov0@gmail.com>
---
 onnx/test/test_external_data.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/onnx/test/test_external_data.py b/onnx/test/test_external_data.py
index 2feeed2ff5..002bc2a1cf 100644
--- a/onnx/test/test_external_data.py
+++ b/onnx/test/test_external_data.py
@@ -517,6 +517,7 @@ def test_check_model(self) -> None:
             checker.check_model(self.model_filename)
 
 
+@pytest.mark.skipif(os.name != 'nt', reason='Skip Windows test')
 class TestNotAllowToLoadExternalDataOutsideModelDirectoryOnWindows(TestLoadExternalDataBase):
     """Essential test to check that onnx (validate) C++ code will not allow to load external_data outside the model
     directory. """
@@ -531,7 +532,6 @@ def create_external_data_tensor(self, value: List[Any], tensor_name: str) -> Ten
         tensor.data_location = onnx.TensorProto.EXTERNAL
         return tensor
 
-    @pytest.mark.skipif(os.name != 'nt', reason='Skip Windows test')
     def test_check_model(self) -> None:
         """We only test the model validation as onnxruntime uses this to load the model. """
         with self.assertRaises(onnx.checker.ValidationError):

From 7651b4b56b98e970acfc2b46e75224f32ba8bdd6 Mon Sep 17 00:00:00 2001
From: jnovikov <johnnovikov0@gmail.com>
Date: Wed, 10 Aug 2022 01:22:30 +0100
Subject: [PATCH 10/10] Remove unused pathlib

Signed-off-by: jnovikov <johnnovikov0@gmail.com>
---
 onnx/test/test_external_data.py | 1 -
 1 file changed, 1 deletion(-)

diff --git a/onnx/test/test_external_data.py b/onnx/test/test_external_data.py
index 002bc2a1cf..107dd3a84a 100644
--- a/onnx/test/test_external_data.py
+++ b/onnx/test/test_external_data.py
@@ -1,6 +1,5 @@
 # SPDX-License-Identifier: Apache-2.0
 import tempfile
-import pathlib
 import unittest
 import uuid
 
